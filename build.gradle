import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.cadixdev.licenser' version '0.6.1' apply false
    id 'org.ajoberstar.grgit' version '5.2.1'
    id 'maven-publish'
    id 'java'
}

group 'net.william278'
version "$ext.plugin_version${versionMetadata()}"
description "$ext.plugin_description"
defaultTasks 'licenseFormat', 'build'

ext {
    set 'version', version.toString()
    set 'description', description.toString()
}

allprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'org.cadixdev.licenser'
    apply plugin: 'java'

    compileJava.options.encoding = 'UTF-8'
    compileJava.options.release.set 16

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
        maven { url 'https://repo.velocitypowered.com/snapshots/' }
        maven { url 'https://repo.minebench.de/' }
        maven { url 'https://repo.wea-ondara.net/repository/public/' }
        maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.william278.net/releases/' }
        maven { url 'https://mvn-repo.arim.space/lesser-gpl3/' }
    }

    license {
        header = rootProject.file('HEADER')
        include '**/*.java'
        newLine = true
    }

    processResources {
        filesMatching(['**/*.json', '**/*.yml']) {
            filter ReplaceTokens as Class, beginToken: '${', endToken: '}',
                    tokens: rootProject.ext.properties
        }
    }
}

subprojects {
    version rootProject.version
    archivesBaseName = "${rootProject.name}-${project.name.capitalize()}"
    compileJava.options.encoding = 'UTF-8'

    jar {
        from '../LICENSE'
    }

    if (['bungee', 'velocity', 'bukkit', 'plugin'].contains(project.name)) {
        shadowJar {
            destinationDirectory.set(file("$rootDir/target"))
            archiveClassifier.set('')
        }

        jar.dependsOn shadowJar
        clean.delete "$rootDir/target"
    }

    if (['plugin'].contains(project.name)) {
        publishing {
            repositories {
                if (System.getenv("RELEASES_MAVEN_USERNAME") != null) {
                    maven {
                        name = "william278-releases"
                        url = "https://repo.william278.net/releases"
                        credentials {
                            username = System.getenv("RELEASES_MAVEN_USERNAME")
                            password = System.getenv("RELEASES_MAVEN_PASSWORD")
                        }
                        authentication {
                            basic(BasicAuthentication)
                        }
                    }
                }
                if (System.getenv("SNAPSHOTS_MAVEN_USERNAME") != null) {
                    maven {
                        name = "william278-snapshots"
                        url = "https://repo.william278.net/snapshots"
                        credentials {
                            username = System.getenv("SNAPSHOTS_MAVEN_USERNAME")
                            password = System.getenv("SNAPSHOTS_MAVEN_PASSWORD")
                        }
                        authentication {
                            basic(BasicAuthentication)
                        }
                    }
                }
            }

            publications {
                mavenJava(MavenPublication) {
                    groupId = 'net.william278'
                    artifactId = "huskchat"
                    version = "$rootProject.version"
                    artifact shadowJar
                }
            }
        }
    }
}

logger.lifecycle("Building HuskChat ${version} by William278")

@SuppressWarnings('GrMethodMayBeStatic')
def versionMetadata() {
    // Get if there is a tag for this commit
    def tag = grgit.tag.list().find { it.commit.id == grgit.head().id }
    if (tag != null) {
        return ''
    }

    // Otherwise, get the last commit hash and if it's a clean head
    if (grgit == null) {
        return '-' + System.getenv("GITHUB_RUN_NUMBER") ? 'build.' + System.getenv("GITHUB_RUN_NUMBER") : 'unknown'
    }
    return '-' + grgit.head().abbreviatedId + (grgit.status().clean ? '' : '-indev')
}